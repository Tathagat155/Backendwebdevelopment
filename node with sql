const { faker } = require('@faker-js/faker');
const mysql = require('mysql2');
const express=require("express");
const app=express();
const methodOverride=require("method-override");

app.use(methodOverride("_method"));

app.use(express.urlencoded({extended:true}));

const path=require("path");
app.set("views engine","ejs");

app.set("views",path.join(__dirname,"/views"));


let port=8080;


// create the connection to database

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    database: 'deltaapp',
    password: 'Rootpassword'
  });

  //after creating connection we excute query of mysql
/*
  let q="insert into user(id,username,email,password) values ?";
  let users=[["123","123_newuser","abc@gmail","abc"],
  ["1234","123_newusers","abcd@gmail","abcd"],
];

  try{
  connection.query(q,[users],(err,result)=>{
    if(err) throw err;
    console.log(result);
  });
} catch(err){
    console.log(err);
}

connection.end();

let createRandomUser=()=> {
    return {
      Id: faker.string.uuid(),
      username: faker.internet.userName(),
      email: faker.internet.email(),
      avatar: faker.image.avatar(),
      password: faker.internet.password(),
     
    };
  }
  console.log(createRandomUser());
  */
  let getRandomUser=()=> {
    return [
       faker.string.uuid(),
       faker.internet.userName(),
        faker.internet.email(),
        faker.internet.password(),
    ];
    };
    //module3
/*

    let data=[];
    for(let i=1; i<100; i++){
  data.push(getRandomUser()); //100faker user
    }

    let q="insert into user(id,username,email,password) values ?";
    try{
      connection.query(q,[data],(err,result)=>{
        if(err) throw err;
        console.log(result);
      });
    } catch(err){
        console.log(err);
    }
    
    connection.end();
    */

    //routing
    app.get("/",(req,res)=>{
      
     let q=`select count(*) from user`;
     try{
      connection.query(q,(err,result)=>{
        if(err) throw err;
     let count=result[0]["count(*)"];
        res.render("home.ejs",{count});
      });
    } catch(err){
        console.log(err);
        res.send(`some error in databases`);
    }

    });

    app.get("/users",(req,res)=>{
       let q=`select * from user`;
       try{
        connection.query(q,(err,users)=>{
          if(err) throw err;
        
          res.render("showusers.ejs",{users});
        

        });
      } catch(err){
          console.log(err);
          res.send(`some error in databases`);
      }
  
       
    })

    //Edit route
    app.get("/user/:id/edit",(req,res)=>{
      let { id }=req.params;

      let q=`select * from user where id='${id}'`;

      try{
        connection.query(q,(err,result)=>{
          if(err) throw err;
      
  let user=result[0];

       res.render("edit.ejs",{user});
        });
      } catch(err){
          console.log(err);
          res.send(`some error in databases`);
      }
    })
    //update route

 app.patch("/user/:id",(req,res)=>{
  let {id}=req.params;
  let {password: formpass,username: newusername}=req.body;
  let q=`select * from user where id='${id}'`;
  try{
    connection.query(q,(err,result)=>{
      if(err) throw err;
  
let user=result[0];
if(user.password!=formpass){
  res.send("wrong password");
}else{
  let q2=`update user set username='${newusername}' where id='${id}'`;
  connection.query(q2,(err,result)=>{
    if(err) throw err;
       res.redirect("/users");
  }); 
  }
  

    });
  } catch(err){
      console.log(err);
      res.send(`some error in databases`);
  }

 })


    app.listen(port,(req,res)=>{
      console.log(`app is listening on ${port}`);
    })
